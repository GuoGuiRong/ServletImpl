郭苗
j2se
j2ee
j2me
C/S
客户端/服务器

B/S
浏览器/服务器

web：
1.能够通过浏览器展示给用户相关的图形化界面
2.处理事件。

远距离数据传输
浏览器：给用户指定访问的远程服务器主机发送指定请求
	new Socket(ip,port);

服务器：根据用户请求返回指定资源。
	new ServerSocket(port);
	监听状态

TCP  UDP
Socket 
ServerSocket

url:
协议://ip:port/资源地址

发送请求的方式
method /estore/login.html HTTP/1.1

返回响应：
HTTP/1.1 200 OK

应用：
	web服务器
	
	1.网络编程 
		网络传输层协议：TCP/UDP
		应用层协议：HTTP
	2.IO
	3.多线程
	4.异常处理
	5.配置信息：
		file
			properties
			xml
	6.类加载机制。	
	7.JAVA环境变量配置
		JAVA_HOME：
		CLASSPATH:.;
			java com.briup.HelloWorld
		PATH：
	8.反射：
	9.面向对象 ，封装，继承，多态	
		Object
	10.接口
	11.集合框架（数据结构）
	12.GUI event

<html>
	<head>
		<title></title>
	</head>
	<body>
		
	</body>
</html>

Regist{
	public void regist(){
		连接数据库。。。。
		处理逻辑请求。。。
	}
}
Login{
	public void login(){
		
	}
}
Login l = new Login()
l.login();
ZhuCe
localhost:8088/estore/login.do
GET /estore/login.do HTTP/1.1

/login.do=com.briup.Login
Properties
xml
interface Servlet{
	public void service(Request,Response);
}
LoginServlet implements Servlet{
	public void service(Request,Response){
	
	}
}

webserver:
  1.能够并发的接收客户端发送的请求，并且对请求作出响应
	1.HTTP协议规则
		Request：
		GET /estore/login.html?key=val HTTP/1.1
		
		key=value

		POST /estore/login.html HTTP/1.1
		
		key=value
	
		paramter=paramValue&p2=v2...


		Response:
		HTTP/1.1  stateCode message
		HTTP/1.1 200 OK
		
		Content-Type:xxxx
		
	2.根据不同的请求作出不同的响应。
		文件：login.html image
		java程序：

---------------------------------------------------------
day 1  Corejava
一、环境，加载过程
  1.JDK
	下载相对应操作系统的JDK
	Path：操作系统自带，用来指定常用命令的搜索路径
	
	windows:
	linux:
		系统：
			/etc/profile
			
		用户：
		   ~/.bashrc
		export JAVA_HOME=/opt/jdk1.7.0;
		export PATH=$JAVA_HOME/bin:$PATH
		export CLASSPATH=.;
		
	简单命令：
		打开终端：
			ctrl+alt+t :打开新的窗口
			ctrl+shift+t：同一个窗口中打开新的
		放大：
			ctrl+shift++
		缩小：
			ctrl+-
		查看文件：
			cat fileName
			more fileName
		编辑文件：
			vi fileName
			vi /etc/profile
			定位到文件尾：
				shift+G
			o:在光标所在行下一行插入
			O:在光标所在行上一行插入
			a：在光标所在位置的下一个位置插入
			A:在光标所在行的行尾
			i:
			I:
			dd:删除当前行
			esc：退出输入模式
			:wq  保存退出
			:q!  强制退出。
			
			cp src  dest
		修改密码：
			passwd ：改当前用户
			passwd username:修改指定用户密码，一般root用户才会做
			sudo passwd：改root用户密码，一般以创建操作系统的第一用户身份。
			
			Note：刚安装的linux系统的root用户是没有密码的，但是没有密码的root用户是禁用的。
			sudo passwd
		切换用户：
			su - 
			su 
			su - username
			su username
  2.优势：
  
	1.跨平台，一次编写，到处运行
		JVM：虚拟机
	2.没有显示的内存处理
		垃圾回收：线程，
		建议但不能强迫垃圾回收器执行：
			System.gc()/Runtime.gc();
	3.没有指针
		java中虽然没有指针，但是保留了指针的特性或者叫优势，我们称之为引用
	4.语言级别多线程
	5.更纯粹的面向对象的编程。
  
  3.JAVA过程：
	
	1.编译
						javac
		java源文件--------------->java字节码文件(.class)
		javac [-d dirName] 源文件名字
		
	2.运行
					java
		.class--------------->cpu
		
		java [-cp dirName] packageName+clsName
		
  4.java基本组成：
	源文件：
		1.
		2.
		3.
	1.类：
		java基本编程单位。
		语法：
			public class clsName{
			
			}
		
	2.主方法：
		jvm调用的入口方法
		定义：
		public static void main(String[]args){
		
		}
	3.package定义：
		1.避免明明冲突
		2.组织功能。
		Note：
			编译过后的字节码文件一定要存放在package所指定的目录之下。
			javac -d dirName 源文件名字
			
	4.import：
		引用其他package下的class
		
  5.java类加载过程：
    java com.briup.day1.FirstTest
	
	启动类加载 （jre\lib\rt.jar）
	扩展类加载  (jre\lib\ext\*.jar)
	系统类加载  (classpath)
	
	
	jar cvf test.jar com/
	
   测试：
	1.假如有一个类A放在扩展类加载目录，有一个类B在系统类加载路径下。如果在类A中引用了类B，请问，能否成功加载，如果可以，写出类加载过程！
			
		
二、类(Class)和对象
  1.类：
	1.是对象的模板
	2.元数据，用来描述数据的数据
	3.抽象的概念的。描述一个范围的事物。是一种类型。
	4.抽象对象所具有的共有特征和行为。
	
  2.对象：
	1.万物皆对象
	2.对象是类的实例
	3.对象是具体的存在，对象唯一
	4.new
	
	  例如：
		教师对象
			miao  女  17  tell(){}
			test  男  30  tell
  3.编程步骤：
	1.分析对象，抽取对象
	2.抽象对象所具有的共有特征(变量)和行为(方法)，形成模板(class)
		public class Teacher{
		    String name;
			String gender;
			int age;
			public void tell(){
			
			}
		}
	3.通过模板生产产品(构建对象)
		Teacher t = new Teacher();
	4.访问属性和行为。
		t.name
		t.age
		t.tell();
		
三、类的定义：
	语法：
		public class clsName{
		
		}
	Note:
		1.类名首字母大写，多个单词组成，每个单词首字母都大写
四、变量：
	定义：标识值有可能会发生变化的标识。
	语法：修饰符 DataType varName [= defaultV];
	注意：所有的变量在使用之前必须初始化(初始化的过程分为显示/隐式)
	
	数据类型：
		1.基本类型：
			布尔类型：boolean
				字面值只有true/false
			字符类型：char
				无符号的16位的整数
				char c = 1;
				char c1 = '\u4e2d';
				char c2 = 'a';
			  java种使用\作为转移字符。
			数字类型：
				1.整数：byte short int long 
				short s = c;
				2.浮点数：float double
		2.引用类型/类类型/对象类型：
			java中每定义一个Class都相当于产生了一种新的类型。
			java.lang.String
			String a = new String("abc");
			String s = "abc";
			java.util.Date
		
	类型转换基本规则：
	  1.自动(隐式数据类型转换)
		小范围------大范围
		整数-----》浮点数
		byte char short 在参与运算时会自动转换成int
		+运算符左右两边的操作数只要有一个是String，其他的都会转成String
	  2.强转(显示)
	    大范围-----》小范围
		
		byte<---->char<----->short

	变量类型：
	  1.成员变量(实例变量)
		1.声明在类体部，方法体外，并且依赖于对象的存在才存在才有意义。
		2.会自动使用默认初始值进行初始化
			boolean : false
			数字类型：0/0L/0.0d/0.0f
			引用类型：null
		3.堆区
		4.只要对象存在， 变量即存在
	  2.局部变量
		1.声明在方法体部，或者比方法体更小的代码块。
		2.使用之前必须进行显示初始化。
		3.栈区
		4.从声明开始，到所在代码块结束。
		
五、方法：
	语法：
		修饰符 returnType methodName(DataType varName,...){
			
		}
	Note:
		1.就算方法没有返回值，也必须有返回类型(void)
		2.如果方法有返回值，在方法体的每一个分支都必须有return。
		
	关键字：
		break :	结束break所在循环体
		break [label]: 结束label所指定的循环
		continue : 结束本次循环，进入下一次循环
		continue [label]:  结束label所指定循环，进入lable所指定循环的下一次循环
		return ： 结束方法
		return value:只有方法体生声明了有返回值，return后边才会携带数据结果
		
	参数传递：
	   1.形参：形式上参与运算的值。一般是跟在方法声明的（）里，用来接收方法调用过程中传递进来参与运算值的变量。
	   2.实参：实际参与运算的值。
		
		值传递：
		引用传递：
		
	方法的重载：
		1.在同一个类中
		2.方法名相同
		3.参数列表不同(参数类型，参数个数，参数顺序(参数类型前提))
		4.与返回类型无关。
		
		add(int a,int b)
		add(double a,double b)
		add(10,10);
	JDK 5.0 ,varargs(可变长参数列表)
		add(int[] a)
		add(int... a)
	
六、构造器：
	定义：
		修饰符  clsName(DataType var,...){
		
		}
	Note:
		1.构造器名字一定和类名保持一致
		2.构造器一定没有返回类型。而且也不能使用void
		3.构造器只在对象构建时被调用。用来对对象的属性进行初始化。
		4.如果在类中没有显示定义构造器，那么虚拟机会自动提供一个无参且方法体空白的构造器
		5.如果类中显示的定义了构造器，那么默认构造器将不会存在。一般要求如果类中显示定义构造器了，那么一定随手加上无参构造器。
	clsName(DataType var,....){
			
	}
七、面向对象编程的特征：
  1.封装：
	 信息的隐藏以及行为实现细节的隐藏。
	 维护数据的一致性和安全性
	 缩小访问权限（private）,将信息私有化话之后，如果需要和其他对象之间进行交流，可以通过提供统一访问入口的方法提供给所有人统一访问方式。
	 
	 
	 访问权限：
				  当前类	包   子类   其他
		public    
		protected						 No
		default					         No
		private    
  测试：	
	在应用范围内，要求类的实例只能有一个(单例)
	
	Note：
		类{属性，行为，构造器}
		class A{
			private String name = "lisi";
			A(){}
		}
		new A();
	
  2.继承：
	   目的：父类代码的复用。简化子类构建过程。
	   Note:
		1.满足is a或者is kind of语义关系
		2.子类可以继承父类所具有的属性和行为。
		3.子类还可以具有比父类更多的特征。
		4.子类可以具有和父类完全同名的方法，子类可以覆盖父类本身所具有的行为。
		5.子类可以 具有和父类完全一致的属性。
		6.可以使用父类类型的变量接收子类类型的对象实例
		7.构造器不能被 继承。
		
	public class ShoutAnimal{
		private String name;
		get/set...
		public void shout(){
		}
	}	      
	public class Cat extends ShoutAnimal{
	}
	public class Dog extends ShoutAnimal{
	}
	ShoutAniaml an1 = new Dog();
	引用类型数据类型转换：
		1.隐式：
			父类类型的引用指向子类对象
			ShoutAnimal an = new Dog();
		2.显示：
			Dog d = (Dog)an;
			Cat c = (Cat)an;
		只要满足继承关系的子父类在进行强制(显示)类型转换时，编译期语法都可以通过，但是运行时有可能出现跨种族转换(虚拟机抛出ClassCastException),为了在运行时减少类型转换异常，推荐，在使用引用类型的强制类型转换之前先使用instanceof判断是否能够进行转换。
		an instanceof ShoutAnimal :  true
		an instanceof Dog:			 true
		an instanceof Cat:			 false		
		
  3.多态
		相同方法的不同表现形态。
	1.运行时多态：
		相同类域的不同对象在调用相同方法时的表现不同。
		方法的重写:
			1.发生在子父类之间
			2.子类具有和父类完全一样的方法签名(返回类型，方法名，参数列表)
			3.访问权限不能被缩小
			4.异常不能被放大
		
		多态：
			1.有子父类继承关系存在/接口和实现类关系
			2.子类覆盖父类的行为/实现类实现接口中的方法
			3.父类类型的引用指向子类对象/接口类类型的引用指向实现类的对象
			4.调用被 重写了的方法/调用被实现了的方法。
		
		
	2.编译时多态
		方法的重载。
		class Shape{
			getArea(int r){
				System.out.println("圆形");
			}
			getArea(int a,int b){
				System.out.println("三角形");
			}
		}
		getArea()
------------------------------		
day5 

一、static 
  static:
	变量：
		1.只能是成员变量，类变量，
		2.类的实例所共享。
		3.在权限允许范围内可以直接通过类名.变量名的形式访问
		4.某种意义上更类似于全局变量。
	方法：
		1.类方法
		2.在权限允许范围内可以直接通过类名.方法名访问	

		Note：
			static方法不能被重写为非静态的方法
			并且static方法就算被重写也不会有多态的体现。
		Animal an = new Cat();
		an.shout();
		
	代码块：
		static修饰的代码块在类加载的时候执行一次
		没有static修饰的代码块在每一次构建对象时执行一次
		
	
	在所有的静态上下文中不能访问非静态的成员(变量和方法)。
	
二、静态导入：
	import static packageName.clsname.staticMember;
		
三、final
	1.变量：final修饰的变量时常量。必须进行显示初始化。
		1.实例变量：
			初始化过程三选一(必须且只能选一个)
			1.声明即初始化
				final int a = 100;
			2.在匿名代码块中进行初始化：
				final int a;
				{
					a = 100;
				}
			3.可以在构造器中进行显示初始化：
				要求在类中的每一个构造器中都要进行初始化。
		2.类变量：
			二选一（必选）：
			1.声明即初始化
				static final int b = 200;
			2.在静态代码块中初始化：
		3.局部变量：
			在使用之前进行显示初始化。
	2.方法：
		final修饰的方法不能被覆盖（重写）
	3.类：
		final修饰的类不能被继承。

四、abstract
	1.方法：抽象方法
		1.不能有方法体
		2.抽象方法所在类一定是抽象类。
		3.抽象方法存在就是被覆盖的。如果子类继承了带有抽象方法的抽象类，必须对所有的抽象方法进行覆盖。
		4.多态。
	2.类：抽象类
		1.抽象类不能被实例化。但是可以声明抽象类类型的变量。
		2.抽象类是对类的抽象，抽象类所具有的共有特征和行为。
		3.抽象类存在的目的就是用来被继承，实现代码复用。
		4.抽象类中可以有抽象方法，也可以没有。抽象类可以和普通类一模一样（拥有各种类型的变量和方法）
		5.如果一个类继承抽象类，必须实现抽象类中所有抽象方法，或者子类本身也是抽象类。
		
abstract class Animal{
	private String name;
	abstract void shout();
}
class Dog{
}
class Cat{
}
	interface Action{
		 void run();
		 void xxx();
	}
	interface USBDevice{
		xx = ""; 
		driver();
	}
	
	class Person{
		void let(){
		
		}
	}
	
五、interface
	接口
	1.接口是比抽象类还抽象的存在，接口是抽象类的极致抽象。
	2.接口中所有的方法都是public abstracht，接口中所有的变量都是public static final
	3.接口主要用来定义标准。
	4.接口可以多继承。一个类可以实现多个接口。
	5.接口的存在本身可以规避java不能多继承的操作特点。
	
interface USBDevice{
	String type="USB";
	void driver();
}
class Mouse{
	select();
}
class USBMouse extends Mouse implements USBDevice{

}
	
class Computer{
	void use(USBDevice usb){
		usb.driver();
	}
}
	
	对象：
		1.信息载体对象(域对象)
		2.行为对象
	
	
六、定义一个方法，这个方法要求返回一组数据的最大值和最小值。
public class clsName{
	1.成员变量
		1.类变量(static)
		2.实例变量
	2.成员方法
		1.类方法(static){
			int a = 100;
			局部内部类
		}
		2.实例方法{
			int b = 200;
		}
	3.内部类：
		1.静态内部类
		2.成员内部类(实例内部类)
}
class Outer{
	static int a = 100;
	static class Inner{
	
	}
	void test3(){
		a = 100;
		test2();
		new Inner();
	}
	static void test(){
		Syso(a);
		test2();
		new Inner();
	}
	static void test2(){
	
	}
}
class Test{
	public static void main(String args[]){
		new Outer.Inner();
	}
}
七：内部类：
	定义在类体部，方法体部，甚至比方法体更小的代码块内部的类
	1.静态内部类（内部类中最简单的形式）
		1.声明在类体部，方法体外，并且使用static修饰的内部类
		2.访问特点可以类比静态变量和静态方法
		3.脱离外部类的实例独立创建
			在外部类的外部构建内部类的实例
				new Outer.Inner();
			在外部类的内部构建内部类的实例
				new Inner();
		4.静态内部类体部可以直接访问外部类中所有的静态成员，包含私有
	2.成员内部类(实例内部类)
		1.没有使用static修饰的内部类。
		2.在成员内部类中不允许出现静态变量和静态方法的声明。
			static只能用在静态常量的声明上。
		3.成员内部类中可以访问外部类中所有的成员(变量，方法)，包含私有成员，如果在内部类中定义有和外部类同名的实例变量，访问：
			OuterClass.this.outerMember;
		4.构建内部类的实例，要求必须外部类的实例先存在
			外部类的外部/外部类的静态方法：new Outer().new Inner();
			外部类的实例方法：
				new Inner();
				this.new Inner();
	3.局部内部类:
		1.定义在方法体，甚至比方法体更小的代码块中
		2.类比局部变量。
		3.局部内部类是所有内部类中最少使用的一种形式。
		4.局部内部类可以访问的外部类的成员根据所在方法体不同。
			如果在静态方法中：
				可以访问外部类中所有静态成员，包含私有
			如果在实例方法中：
				可以访问外部类中所有的成员，包含私有。
		  局部内部类可以访问所在方法中定义的局部变量，但是要求局部变量必须使用final修饰。
		  
	4.匿名内部类
		1.没有名字的局部内部类。
		2.没有class,interface,implements,extends关键字
		3.没有构造器。
		4.一般隐式的继承某一个父类或者实现某一个接口
	
-------------------------------------
Student  stu = new Student();

学生信息管理{
	add(Student stu);
	add(int index,Student stu);
	get(int index);
	set(int index ,Student stu);
	int size();
	int remove(int index);
}
Student{
	String name;
	int age;
}

数组：
	DataType[] varName = new DataType[length];
	Dataytype varName[] ;
	Note:
		1.数组的数据类型必须相同
		2.数组是对象：
			length
		   数组中存放的每一个数据都是它的成员。
		3.要在内存中申请连续的内存空间进行存储。数组创建时一定要指明length，长度一旦指明，不能改。
		4.数组的访问：
			数组变量名[index(0---length-1)];
		5.数组的声明创建初始化：
			int[] a ;
			a = new int[3];
			a[0] = 100;
			a[1] = 200;
			System.out.println(a[2]);

			int[] b = new int[]{1,2,3,45};
			int[] c ;
			c = new int[]{1,23,4,4,45};
			
			error:如果想要用{}直接初始化，那么声明和初始化必须在一起。
			/*int[] d ;
			d = {12,3,4,5,6};*/
			
			success:
			int[] f = {32,34,5,234,6,7};

		int[][] var = new int[2][2];
		System.out.println(var[0]);   地址值
		System.out.println(var[0][0]);	0
		int[][] var2 = new int[2][];
		System.out.println(var2[0]);  地址值	 
		System.out.println(var2[0][0]); 报错/null/0


StudentManager{
	add(Student stu);
	boolean add(int index,Student stu){
		if(index<0){
			throw new RuntimeException("负的下标值");
		}
		if(index>count){
			return false;
		}
		1.判断容量
		2.移动数据
		3.插入
		4.count++;
		
	}
	addFirst(Student stu);
	addLast(Student stu);
	Student get(int index);
	set(int index,Student stu);
	Student remove(int index);
	Student removeFirst();
	Student removeLast();
	int size();
}
day7 -----------------------------

一、集合框架：
  组成：
	1.接口：Collection,Set,List,SortedSet,Map,SortedMap
	2.实现:HashSet,ArrayList,LinkedList,Vector,TreeSet,HashMap,TreeMap
	3.算法:
  Collection：
		add(E e);
		addAll(Collection cll);
		remove(E e);
		removeAll(Collection coll);
		retainsAll(Collection coll);
		toArray();
		iterator();
	List：
		1.有序的列表。按照存放位置有序。用户可通过他们的Integer index来精确控制元素在list集合中的插入位置，并且进行查找。
		2.允许存放重复值。
		3.如果某一个list集合允许存在null元素，那么null可以多次出现。
			add(int index,E e);
			remove(int index);
			set(int index,E e);
			get(int index);
		
		ArrayList:
			1.借助数组作为存储结构
			2.插入时需要考虑容量是否足够，并且可能会涉及数据移动，
			  删除时也可额能需要移动数据。
			3.使用连续内存空间存放，根据索引值查找效率较高。
		Vector:
			线程安全的ArrayList
		LinkedList:
			1.借助于双向链表作为存储结构
			2.插入，删除不需要移动数据，所有的数据时散列，不需要连续空间存储，插入也不需要考虑空间是否足够。
			3.按照integer index访问数据时，需要从第一个节点或者最后一个节点开始数。
		
	Set：不允许重复的值，并且最多只允许一个null的结果存在。
		HashSet：借助于哈希表实现(底层维护的是一个HashMap的实例)
			HashSet在判断数据是否重复的时候，先判断hash值是否一样，如果hash值不一样直接认为不是重复的对象，如果hash值一样，判断当前要插入的值是否和所要插入的位置上所存放的数据(数据链表)是同一个，如果不是调用equals方法进行比较。
			对于自定义的对象在自定义重复规则时，应该重写两个方法：
				1.hashCode()
					规则：在equals方法返回结果为false时，hashCode的返回值应该尽可能散列。以此来减少equals的调用，提高插入效率。
				2.equals()：
					规则：
				  public boolean equals(Object obj){
					//1.判断是否是同一个
					if(this==obj) return true;
					//2.判断类型是否相同
					if(obj.getClass()!=this.getClass()) return false;
					//3.自定义判断
					ClsName val = (ClsName)obj;
						
				  }
		SortedSet:存放在SortedSet集合中所有的元素拥有自然排序规则，或者能够按照创建set集合时指定的Comparator对象排序。
			1.自然排序规则：
				要求存放在集合中的元素实现Comparable接口
				class Element implements Comparable{
					int compareTo(Element o){
						return <0 ;  this<o;
						return 0;    this==o;
						return >0;   this>o;
					}
				}				
			
			2.客户化排序：
				创建Set集合时传递Comparator
				class MyComparator implements Comparator{
					int compare(Element o1,Element o2){
						return <0 ;  o1<o2;
						return 0;    o1==o2;
						return >0;   o1>o2;
					}
				}
		  TreeSet:底层维护一个TreeMap的实例。
		  
32,3,5,8,10,6,9,27

	Map：存放key=value映射的集合，key值不允许重复。
		   put(key,value):添加/替换
	Object remove(key):移除指定的key=value的映射。
	Object get(key):查找指定的映射。
		   entrySet();
		   keySet();
		   values();
		   
		HashMap:借助于Hash表实现的，按照key值的hashCode确定在表中的存放位置，key值的重复规则也需要经过HashCode和equals的判断。规则参照HashSet。
		Hashtable：线程安全的HashMap，并且不允许null的key和value。
		
	SortedMap:有序的，按照key值的自然排序规则或者在创建SortedMap集合时指定的Comparator进行排序。	
		

JDK5.0之后有增强for循环：
	一个对象实现了java.lang.Iterable,那么这对象就可以作为foreach(增强for循环)的迭代目标。
ArrayList<String> list = ;
for(String val:list){

}
for(Iterator it = list.iterator;it.hasNext();val = it.next()){
	
}
	
定义一个方法用来计算两个数的和（两个数等到方法调用时才知道）
	public int add(int a,int b){
	
	}

ArrayList {
	Object[] obj = new Object[10];
}
ArrayList list = new ArrayList();
list.add();
	
day8-------------------------

一、泛型
	将数据类型参数化，在编译时阻止用户非法输入，减少运行时抛出的ClassCastException
	
	T ： type
	E ： Element
	K ： Key
	V ： Value
	
	泛型定义语法：<TypeVar>
	
	1.泛型接口：
		public interface InterName<T>{
		}
	2.泛型接口：
		public class className<T>{
		}
	3.
		public class clsName<E extends Number> implements InterName<E>{
		
		}

	Note:
		1.泛型类型不能被实例化
		2.泛型是编译时行为，会自动擦除为上限类型。
			ArrayList list = new ArrayList();
			ArrayList list2 = new ArrayList<String>();
			ArrayList<String> list3 = new ArrayList<String>();
			ArrayList<String> list4 = new ArrayList();
		3.泛型类型只能是类类型，不能是基本数据类型。
	上限
		T extends Type
	下限
		? super Type
java.lang.BigDecimal
二、包装类类型	
JDK5.0
  自动装箱和自动拆箱
								 缓存
byte			Byte			-128---127;
short			Short			-128---127
int				Integer			-128---127(最大值可以自定义)
long			Long			-128---127
float			Float			不缓存
double			Double			不缓存
char			Character		0------127
boolean			Boolean			提供了两个常量TRUE,FALSE
		
基本类型------》包装类类型:装箱
	Integer i1 = new Integer(100); //JDK5.0之前，手动装箱
	Integer i2 = Integer.valueOf(100); //JDK5.0之后，自动装箱
	Integer i3 = 100; //JDK5.0后，效果等同于Integer.valueOf(100);

包装类类型----->基本类型：拆箱
	int i = i1.intValue();
	
String和基本数据类型之间的数据转换：
	WrapType.parseType(String);
	Long.parseLong("100");
	Integer.parseInt("100");
	
----------------------------------------------------	
day9
一、枚举
	控制某种类型的取值只能是某一个有限的常量集合。
	目的：能够让编译器阻止非法输入
Person{
	int age;
	String name;
     gender;
	final static String F = "男"；
}
[abstract] class Gender{
	private String name;
	public static final Gender FEMALE = new Gender("FEMALE");
	public static final Gender MALE = new Gender("MALE");
	private Gender(String name){
		this.name = name;
	}
}
Gender g = new Gender();
enum Gender{
	FEMALE,MALE
}

	Note:
		1.构造必须是private
		2.如果定义了有有参构造器，那么无参构造器不在提供，enum的每一个常量值都必须传递构造参数。
			enum Gender{
				FEMALE(0),MALE(1);
				private Gender(int id){
				
				}
			}
		3.枚举类型可以实现接口，但是不能再继承父类(因为所有的enum默认都继承了Enum)
			class Enum{
				private final String name;
				private final int ordinal;
				Enum(String name,int ordinal){
					this.name = name;
					this.ordinal = ordinal;
				}
				public final String name(){
					return name;
				}
				public final int ordinal(){
					return ordinal;
				}
			}

		4.enum中可以有抽象的方法，可以实现接口，
			要求：
				1.如果enum中定义了有抽象方法，那么，enum中的每一个实例都必须 实现抽象方法
				enum Gender{
					FEMALE(){
						public void test(){
							
						}
					},MALE(){
						public void test(){
						
						}
					};
					public abstract void test();
				}
				2.如果enum类型实现了某一个接口，那么enum类中必须提供对这个接口中抽象方法的实现，或者enum中的每个实例提供对抽象方法的实现。

----------------------------------------------
class Student{
	write(Pen p){
		p.use();
	}
}
new Student().write()

二、反射
	在运行时才知道类的名字，方法的名字，属性的名字，依然可以构建对象，执行方法，操作属性。
	
package
import

private class clsName{
	modifiers DataType varName;
	modifiers clsname(Datatype args....){
	}
	modifiers returnType methodName(DataType args....){
		.....
	}
	
}

class Field{
	private String modifiers;
	private Class type;
	private String fileName;
	public void set(Obj){}
	public Object get(Obj){}
}
class Constrcutor{
	private String modifiers;
	public Object newInstance(arg....);
}
class Method{
	private String modifiers;
	private String methodName;
	public Object invoke(Object target,arg....){
	
	}
}

class Class{
	private String modifiers;
	private String name;
	private String packageName;
	Field[] fs;
	Constructor[] cs;
	Method[] ms;
}

反射编程第一步：
  1.获取镜像(类的结构对象)
	1.如果只知道类的字符串名：
	   Class.forName(类名(packageName+className));
	   Class.forName("com.briup.day9.Person");
	2.知道类的类型：
	   className.class;
	   Person.class;
	3.已知对象：
		Super p = new Son();
		Person p = new Person();
		p.getClass();
	4.特殊：
		int.class
		byte.class
		Integer.class
  2.属性
	getField(String name);
	getFields();
	getDeclaredField(String name);
	getDeclaredFields();
	
	get(Object target);
	set(Object target,Object value);
	//如果是私有属性，正常情况下不能直接访问，而应该通过他们的get/set方法进行访问。
	
  3.方法:
	getMethod(String methodName,Class...paramType);
	getMethods();
	getDeclaredMethod(String methodName,Class...paramType);
	getDeclaredMethods();
	
	Object result = methodObj.invoke(Object target,Object...params);
	
  4.构造器
	getConstructor(Class...paramTYpe);
	getConstructors();
	getDeclaredConstructor(Class...paramType);
	getDeclaredConstructors();

	Object obj = newInstance(Object...params);
--------------------------------------------------
day 10
一、异常
   1.概念：
		程序正常执行流程中发生的一些意外情况。异常发生时会改变程序的正常执行流程。

   2.异常的分类：
	   1.Error:程序没办法从错误中回复
	   2.Exception：
		 1.UncheckedException（RuntimeException）:非检查性异常，也叫作运行时异常。不要求代码中一定要显示处理。一般这种异常发生时，都认为是代码逻辑控制不够严谨，顺序不够合理造成的，一般建议增加逻辑或者微调代码顺序来规避异常。
			1.java.lang.NullPointException:
			2.java.lang.ArrayIndexOutOfBoundsException
			3.NumberFormatException
			4.ClassCastException
			5.ArithmeticException
			
		   java中所有的非检查性异常都属于java.lang.RuntimeException类的子类。
			
		 2.CheckedException
			检查性异常。要求程序必选显示处理，如果没有处理，那么连编译都不能通过。
	
   3.异常的处理：
	  1.try...catch...finally
		try{
			程序正常流程(有可能会发生异常的代码)
			int a = 10/0; //throw new ArithmeticException("/ by zero");
		}catch(Exception e){
			当Exception1这种类型的异常发生时的处理过程
			e.getMessage();
			e.getCause();
			e.printStackTrace();
		}catch(Exception2 e2){
			当Exception2这种类型的异常发生时的处理过程
		}finally{
			无论有没有发生异常都会执行的代码块。
		}
		一个try语句能够对应的Catch语句有多个，catch在捕获异常是应该从小到大的范围。同时最多只能有一个catch语句可以匹配。
		
		finally语句是无论如何一定会执行的代码块。如果在finally语句之前遇见了return value操作，那么拿着return要返回的结果执行finally，finally执行完成之后，再return。如果finally中也有return语句，那么会替换原来的return值。
		
		在执行finally语句块之前如果虚拟机退出System.exit(0);
	  
	  2.throws
		 用在方法声明时。throws后边可以跟多个异常，异常之间使用,分割
		 public void method()throws Exception1,Exception2...{
			
		 }
		
		throw : 用来在方法体执行过程中，当满足条件，异常对象产生时抛出。
			throw new Exception("message");
		
		
	4.自定义异常：
		class MyException extends Exception/Exception的子类{
			public MyException(){}
			public MyException(String msg){
				super(msg);
			}
			public MyException(String msg,Throwable cause){
				super(msg,cause);
			}
		}
		
		throw new MyException("msg");
		
	5.断言：
		assert boolean_expression:"";
		
		java -ea className;
		
二、Threads
 1.概念：
	1.程序：
	2.进程：
	3.线程：

		   3        3        10       20       5
起床----->刷牙-----洗脸-----喂猫-----做饭-----吃饭----出门

人

41

25

class Thread implements Runable{
	public void run(){
		线程所要执行的任务
	}
	//用来通知cpu，线程任务可以被调度。
	public void start(){
		xxx...
	}
}
new Thread();

   2.java的线程机制：
	java.lang.Thread代表java中的线程对象。
		run()用来定义线程的执行流程。每一个线程都有自己所要执行的任务流程，那么这个任务流程想要能够被cpu调度必须写在run方法中(java中定义一个线程对象，都需要覆盖run方法)
		start()用来给cpu发送线程可以被调度的信号。因为java本身跨平台，需要规避平台不同所带来的操作差异，因此给cpu发送调度信号的方法不能被覆盖。
   3.线程三 要素：
	  cpu
	  code
	  data
   4.线程的实现方式：
	  1.extends Thread
		class MyThread extends Thread{
			public MyThread(){}
			public MyThread(String name){
				super(name);
			}
			public void run(){
				
			}
		}
		new MyThread("thread1").start();
		
	  2.implements Runnable
	    class MyRunnable implements Runnable{
			public void run(){
			
			}
		}
		new Thread(new MyRunnable()).start();

		java提供两种给thread对象提供执行流程的方式，是为了规避java不能多继承的操作特点。

	5.状态及状态转换：
		1.新建状态(初始状态)
			一个线程对象刚刚创建(new Thread()/new SubThread())
		
		2.runnable(可运行状态)
			调用一个刚刚创建好的线程的start方法，给cpu发送一个请求调度的信号，之后线程处于runnable状态。处于runnable状态的线程脱离程序员控制。他什么时候调度，怎么调度都由cpu决定
			
			万事俱备，只欠cpu

			start只能执行一次。
		3.running(正在运行状态)
			一旦cpu决定调度某一个线程执行，此时线程的run方法被调用，开始执行。
		
		4.block(阻塞状态)
			1.挂起(其他阻塞)：
				sleep(毫秒值):正在运行的线程调用sleep方法，相当于通知cpu，我现在要去休息，不参与cpu的轮换(什么资源都不缺，但是主动放弃cpu轮换权利。)。
					当sleep线程，睡眠时间到了，或者被别人打断了出阻塞状态进入runnable
			
				join():一个正在运行的线程调用其他线程的join方法，相当于通知cpu，我要放弃cpu的使用权，去等我调用了join方法的线程结束之后或者等待状态被别人打断再去参与cpu的轮换，进入runnable状态
					main(){
						t1.join();
					}
					main线程调用了t1线程的join方法，那么main线程进入阻塞状态，等待t1线程结束之后再去参与cpu的轮换。
					
				谁调用谁等待，调用谁等待谁。
				
				sleep/join进入阻塞状态时，不放弃资源。
				
				interrupt:中断线程(相当于设置线程的interrupt state为true)
				isInterrupted:判断线程的中断状态，此方法不影响线程的中断状态
				interrupted:静态方法，用来判断线程的中断状态，同时清空线程的中断状态(相当于执行完了之后将线程的状态状态设置为false)。	
			
			2.锁池等待:
				当一个正在运行的线程遇见Synchronized之后，去申请对象的锁资源，进入锁池等待状态，直到申请的锁资源可用，进入到runnable状态。synchronized指定的代码块结束之后，释放锁资源。
			
			3.等待池等待
				当一个正在运行的线程遇见wait之后，进入到等待池等在状态。直到接收到notify/notifyAll的通知，出等待池等待状态，进入锁池等待状态。知道申请的锁资源可用，进入runnable状态。
		
		5.dead(死亡状态)
			正在运行的线程，如果run方法执行结束了，那么线程进入到死亡状态。一个线程是没办法从死亡状态恢复的。
			
			控制线程随着其他线程的结束而结束：
			 1.声明共有标识符
		

		   start()
	1.new -------> runnable
				   cpu
	2.runnable <---------> running（run）
				run方法结束
	3.running--------------》dead  死亡状态不可逆
			 sleep/其他线程的join方法	timeout/interrupt
	4.running-------------------> block---------------->runnable
			Synchronized	申请的锁资源可用
	5.running---------->block----------->Runnable
	
Account
1000

卡1     卡2
1000    1000
-1000   -1000

0       0
	线程互斥：
		多个并发访问的线程在操作共有资源时的互斥问题。
		java为每一个对象提供了唯一的一把锁资源。
		1.Synchronized(共有资源对象){
			操作有可能会引起数据结果不一致的代码
			需要互斥的代码
			临界区代码
		}
		2.Synchronized可以出现在方法体上(实例方法)
			相当于申请当前对象的锁,效果类似于
			Synchronized(this){
				临界区的代码
			}
			==
			synchronized public void test(){
				临界区代码
			}
		3.静态方法：
			Synchronized public static void test(){
			
			}
			Synchronized(ClsName.class){
			
			}
	线程互斥的解决方案：
		1.找共有资源
		2.找临界区代码（操作需要严格互斥的代码）
		3.申请对象的锁，对临界区代码加锁。
	
		Note：
			对于临界区代码的控制越精确，并发访问效率越高。


	一个线程计算1--100之间所有数的和，另外一个线程取1--100之间所有数的和。

	多个并发访问的线程，在执行过程中控制谁先谁后。
	解决方案：
		1.找共有资源
		2.判断谁wait，谁notify/notifyAll
		3.控制notifyAll在wait执行之后执行。

	
 yield：让步，给cpu发送一个暗示，放弃当前cpu的使用权，进入runnable状态，参与轮换。

--------------------------------
day12 I/O
  流：java程序和外围数据设备交互数据的方式(桥梁)
  
  选择java程序作为基本参照
  流向：
	  Input:从外围获取数据的都是输入
		数据源:外围
		数据目的地：java程序
	  Output:所有从java程序出去数据的过程是输出
		数据源：java程序
		数据目的地：外围...
  
  流操作的基本单位：字节流和字符流
  字节流：
	InputStream OutputStream
  字符流：
	Reader   Writer
 
 
  功能：
	节点流（基本功能流）
	包装流
 
 InputStream:字节输入流
	int read(): 一次读一个字节，并且返回读到的字节。
	int read(byte[] b): 尝试从流中读取b.length个字节的数据存放到字节数组b中，方法返回实际读到的字节个数。（=read(byte[] b,0,b.length）;
	int read(byte[] b,position,length): 尝试从流中读取length个长度的字节，存放在字节数组b中，并且从b数组的postion位置开始存放。方法返回实际读到的字节个数。
	
	skip(long):
	mark():
	markSupported();
	reset();
	close();
 OutputStream：字节输出流
	write(int b):写出一个字节
	write(byte[] b)：
	write(byte[] b,off,length):
	
	flush();
	close();
 
 
标准输入:System.in
标准输出:System.out

文件输入输出字节流；
	FileInputStream / FileOutputStream
字符流：FileReader/FileWriter
增加缓存功能的流：
	BufferedInputStream / BufferedOutputStream
	BufferedReader / BufferedWriter
基本类型操作：
	DataInputStream/DataOutputStream
线程通信：
	PipedInputStream/PipedOutputStream
	PipedReader/PipedWriter
	
字节流和字符流之间的转换流
   InputStreamReader
   OutputStreamWriter
   
随机读写文件：	
	RandomAccessFile
	同时实现了DataInput和DataOutput，所以RandomAccessFile既可以做输入流同时又可以做输出流。并且能够直接操作基本数据类型的值。
	将文件数据看做一个大的字节数组，所以随机访问文件位置效率较高
	seek(long position)
	skipBytes(long length)
	
	new RandomAccessFIle(String fileName,String mode);
	
File:
	
对对象进行序列化的操作：
	ObjectInputStream：反序列化
	ObjectOutputStream:序列化
	
	能够被序列化的对象都一定需要实现java.io.Serializable
	一个支持序列化的对象，里边所维护的所有的数据信息都应该支持序列化。
	如果一个类中某些信息是不支持序列化，或者在对当前对象进行序列化时不需要对某些指定信息进行序列化，可以使用修饰符transient进行标识。
	静态属性不会被序列化。
 
流的编程步骤：
	1.根据当前需要使用的操作特征，选着还是的流
	2.构建流对象
	 (是由高级流进行包装)
	3.调用read/writer方法进行读/写操作
	4.释放资源。
 
Scanner: java.util.Scanner
PrintStream:
	即可以直接操作文件，并且指定操作文件的编码格式，同时允许对OutputStream流进行包装，System.out本身所属的类型也是PrintStream类型
PrintWriter:
	实现了PrintStream中几乎所有的print方法，也可以直接操作文件，同时又可以作为OutputStream或者Writer流的包装流。

 
 
-----------------------------------
NetWork

基于TCP协议的网络编程：
ServerSocket
Socket

1.接收端(服务端)
	步骤：
		1.创建ServerScoket对象，并且绑定用来接收请求的端口号
		2.让监听端口处于监听状态
			Socket socket = serverSocket.accept();
			在没有接收到请求之前，程序一直处于block状态。
		3.获取输入/输出流，进行读写操作
		4.使用包装流包装
		5.读/写
		6.关闭资源
2.发送端(客户端)
	步骤：
		1.直接创建Socket对象，指明要建立连接的服务端ip，以及人家用来接收请求的额端口号。
			Socket socket = new Socket(ip,port);
		2.获取输入/输出流
		3.使用包装流包装
		4.读/写
		5.关闭资源


创建客户端及服务器端，












 


	
	